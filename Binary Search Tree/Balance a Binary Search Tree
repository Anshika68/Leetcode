Given the root of a binary search tree, return a balanced binary search tree with the same node values. If there is more than one answer, return any of them.

A binary search tree is balanced if the depth of the two subtrees of every node never differs by more than 1.


# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def balanceBST(self, root: Optional[TreeNode]) -> Optional[TreeNode]:
        sorted_array = self.inorder_traversal(root)
        return self.sortedArrayToBST(sorted_array)
        
    def inorder_traversal(self, root):
            nodes = []
            stack = []
            current = root

            while current or stack:

                while current:
                    stack.append(current)
                    current = current.left
                
                current = stack.pop()
                nodes.append(current.val)
                current = current.right

            return nodes
        
    def sortedArrayToBST(self, nums: List[int]) -> Optional[TreeNode]:
            if not nums:
                return None

            n = len(nums)
            mid = n//2
            root = TreeNode(nums[mid])

            # Queue to keep track of parent, left, right tuples

            q = deque()
            q.append((root, 0, mid-1))
            q.append((root, mid+1, n-1))

            while q:
                parent, left, right = q.popleft()
                if left<=right:
                    mid = (left+right)//2
                    child = TreeNode(nums[mid])
                    if nums[mid] < parent.val:
                        parent.left = child
                    else:
                        parent.right = child
                    q.append((child, left, mid-1))
                    q.append((child, mid+1, right))

            return root
