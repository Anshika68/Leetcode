Given a root node reference of a BST and a key, delete the node with the given key in the BST. Return the root node reference (possibly updated) of the BST.

Basically, the deletion can be divided into two stages:

Search for a node to remove.
If the node is found, delete the node.


# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right

class Solution:
    def deleteNode(self, root: Optional[TreeNode], key: int) -> Optional[TreeNode]:
        if not root:
            return None

        if key < root.val:
            root.left = self.deleteNode(root.left, key)
        elif key > root.val:
            root.right = self.deleteNode(root.right, key)
        else:
            # Found node to delete
            # Case 1: no left child
            if not root.left:
                return root.right
            # Case 2: no right child
            if not root.right:
                return root.left
            # Case 3: two children â€” replace with inorder successor (min of right)
            succ = self._minNode(root.right)
            root.val = succ.val
            # delete the successor from right subtree
            root.right = self.deleteNode(root.right, succ.val)

        return root

    def _minNode(self, node: TreeNode) -> TreeNode:
        while node.left:
            node = node.left
        return node
