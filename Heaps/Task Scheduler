You are given an array of CPU tasks, each labeled with a letter from A to Z, and a number n. Each CPU interval can be idle or allow the completion of one task. 
Tasks can be completed in any order, but there's a constraint: there has to be a gap of at least n intervals between two tasks with the same label.

Return the minimum number of CPU intervals required to complete all tasks.


from collections import Counter, deque
class Solution:
    def leastInterval(self, tasks: List[str], n: int) -> int:
        # Step 1 - Count the frequency of each task
        task_counts = Counter(tasks)

        # Step 2 - Create a max-heap with task_counts
        max_heap = []
        for count in task_counts.values():
            max_heap.append(-count)

        heapq.heapify(max_heap)

        # Step 3 - Initialize variables
        time = 0
        wait_queue = deque()

        # Step 4 - Process the tasks
        while max_heap or wait_queue:
            time+=1

            if max_heap:
                current_task = heapq.heappop(max_heap)
                current_task += 1

                if current_task != 0:
                    wait_queue.append((current_task, time+n))
            
            if wait_queue and wait_queue[0][1] == time:
                heapq.heappush(max_heap, wait_queue.popleft()[0])

        return time
